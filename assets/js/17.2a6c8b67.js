(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{423:function(t,v,_){"use strict";_.r(v);var e=_(2),r=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"redis基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redis基础"}},[t._v("#")]),t._v(" Redis基础")]),t._v(" "),v("h2",{attrs:{id:"基本操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[t._v("#")]),t._v(" 基本操作")]),t._v(" "),v("p",[t._v("​\t\t"),v("code",[t._v("redis-server")]),t._v("启动"),v("code",[t._v("Redis")]),t._v("服务。使用命令"),v("code",[t._v("redis-cli")]),t._v("连接到Redis。")]),t._v(" "),v("h2",{attrs:{id:"字符串"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("字符串的使用")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("SET")]),t._v(" key value")]),t._v(" "),v("td",[t._v("设置键key的值为value。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SETEX")]),t._v(" key seconds value")]),t._v(" "),v("td",[t._v("将键key的值设置为value，并且超时时间为seconds秒。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("PSETEX")]),t._v(" key milliseconds value")]),t._v(" "),v("td",[t._v("将键key的值设置为value，并且超时时间为milliseconds毫秒。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SETNX")]),t._v(" key value")]),t._v(" "),v("td",[t._v("只有在键key不存在的情况下，将key的值设置为value。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("GET")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回键key的值设置为value。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("GETSET")]),t._v(" key value")]),t._v(" "),v("td",[t._v("将键key的值为value，并返回设置前的旧值。若没有旧值则返回nil。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("APPEND")]),t._v(" key value")]),t._v(" "),v("td",[t._v("如果键key存在并且值是⼀个字符串，则把value追加到现有值的末尾。"),v("br"),t._v("如果key不存在，则将key的值设置为value。"),v("br"),t._v("返回追加value之后该value的⻓度。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SETRANGE")]),t._v(" key offset value")]),t._v(" "),v("td",[t._v("从偏移量offset开始⽤ value字符串覆盖键key存储的原字符串。 offset从0开始返回修改后新的value字符串的⻓度")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("GETRANGE")]),t._v(" key start end")]),t._v(" "),v("td",[t._v("返回键key存储的字符串的从start到end之间（包括start和end）的部分。"),v("br"),t._v("返回value的指定⼦串。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("INCR/DECR")]),t._v(" key")]),t._v(" "),v("td",[t._v("将键key存储的数字值value加⼀ /减⼀。"),v("br"),t._v("若key不存在则值先初始化为0再加⼀ /减⼀。"),v("br"),t._v("若key存储的值不能被解释为数字，则返回错误。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("INCRBY/DECRBY")]),t._v(" key increment/decrement")]),t._v(" "),v("td",[t._v("将键key存储的数字值value加上/减去⼀个increment/decrement的量。"),v("br"),t._v("若key不存在则值先初始化为0再加/减。"),v("br"),t._v("若key存储的值不能被解释为数字，则返回错误。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("INCRBYFLOAT")]),t._v(" key increment")]),t._v(" "),v("td",[t._v("将键key存储的浮点数值value加上⼀个increment的增量。"),v("br"),t._v("若key不存在则值先初始化为0再执⾏加上增量的操作。"),v("br"),t._v("若key存储的值或increment不能被解释为浮点数值，则返回错误。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("MSET")]),t._v(" key value [key value ...]")]),t._v(" "),v("td",[t._v("同时为多个键设置值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("MGET")]),t._v(" key [key ...]")]),t._v(" "),v("td",[t._v("返回给定的⼀个或多个键的值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("MSETNX")]),t._v(" key value [key value ...]")]),t._v(" "),v("td",[t._v("当所有给定的key都不存在时才同时为多个键设置值。"),v("br"),t._v("O(N)"),v("br"),t._v("只要有⼀个key已经存在，那么所有值都不会被继续设置。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("DEL")]),t._v(" key [key ...]")]),t._v(" "),v("td",[t._v("删除给定的⼀个或多个键的值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("STRLEN")]),t._v(" key")]),t._v(" "),v("td",[t._v("获取键为key的值的字符串⻓度。")])])])]),t._v(" "),v("h2",{attrs:{id:"列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("列表的使用")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("LPUSH")]),t._v(" key element [element ...]")]),t._v(" "),v("td",[t._v("将⼀个或多个元素添加到列表key的表头（左侧） ,多个值则从左⾄右依次插⼊表头"),v("br"),t._v("如果列表key不存在，则创建⼀个然后执⾏ LPUSH插⼊操作；"),v("br"),t._v("如果列表key存在但不是列表类型，则返回错误")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LPUSHX")]),t._v(" key element [element ...]")]),t._v(" "),v("td",[t._v("当且仅当key存在并且是⼀个列表的时候，才执⾏ LPUSH操作")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("RPUSH")]),t._v(" key element [element ...]")]),t._v(" "),v("td",[t._v("将⼀个或多个元素添加到列表key的表尾（右侧） ,多个值则从左⾄右依次插⼊表尾；"),v("br"),t._v("如果列表key不存在，则创建⼀个然后执⾏ RPUSH插⼊操作；"),v("br"),t._v("如果列表key存在但不是列表类型，则返回错误。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("RPUSHX")]),t._v(" key element [element ...]")]),t._v(" "),v("td",[t._v("当且仅当key存在并且是⼀个列表的时候，才执⾏ RPUSH操作。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LPOP")]),t._v(" key [count ...]")]),t._v(" "),v("td",[t._v("将⼀个或count个元素从列表头⽅向移除并将其返回；"),v("br"),t._v("如果列表key不存在，则返回nil。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("RPOP")]),t._v(" key [count ...]")]),t._v(" "),v("td",[t._v("将⼀个或count个元素从列表尾⽅向移除并将其返回；"),v("br"),t._v("如果列表key不存在，则返回nil。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("RPOPLPUSH")]),t._v(" source destination")]),t._v(" "),v("td",[t._v("在⼀个原⼦时间内，将source列表的尾部元素弹出，并插⼊到destination列表的头部，返回该元素；"),v("br"),t._v("如果列表key不存在，则返回nil。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LREM")]),t._v(" key count element")]),t._v(" "),v("td",[t._v("移除列表key中与element相等的count个元素，返回被移除的元素的数量。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LLEN")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回列表key的⻓度；如果key不存在则返回0；如果key不是列表类型则返回错误。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LINDEX")]),t._v(" key index")]),t._v(" "),v("td",[t._v("返回列表key中索引为index的元素。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LINSERT")]),t._v(" key BEFORE|AFTER pivot element")]),t._v(" "),v("td",[t._v("将元素element插⼊到列表key中，位于pivot之前(BEFORE)或者之后(AFTER)。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LSET")]),t._v(" key index element")]),t._v(" "),v("td",[t._v("将列表key中索引为index的元素设置为element。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LRANGE")]),t._v(" key start stop")]),t._v(" "),v("td",[t._v("返回列表key中，位于start和stop之间的元素（包括start和stop）。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("LTRIM")]),t._v(" key start stop")]),t._v(" "),v("td",[t._v("只保留列表key中索引为start和stop之间的元素。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("BLPOP")]),t._v(" key [key ...] timeout")]),t._v(" "),v("td",[t._v("列表阻塞式(Blocking)弹出。是LPOP的阻塞版本，当列表中没有任何元素时阻塞，直到超时或发现新的可弹出元素为⽌。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("BRPOP")]),t._v(" key [key ...] timeout")]),t._v(" "),v("td",[t._v("列表阻塞式(Blocking)弹出。是RPOP的阻塞版本，当列表中没有任何元素时阻塞，直到超时或发现新的可弹出元素为⽌。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("BRPOPLPUSH")]),t._v(" source destination timeout")]),t._v(" "),v("td",[t._v("是RPOPLPUSH的阻塞版本，当列表source中没有任何元素时阻塞，<直到超时或发现新的可弹出元素为⽌。")])])])]),t._v(" "),v("h2",{attrs:{id:"集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("集合的使用")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("SADD")]),t._v(" key member [member ...]")]),t._v(" "),v("td",[t._v("将⼀个或多个元素加⼊到集合key中。已存在于集合中的元素将被忽略。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SREM")]),t._v(" key member [member ...]")]),t._v(" "),v("td",[t._v("将⼀个或多个元素从集合key中移除。不存在的member元素将被忽略。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SMEMBERS")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回集合key中的所有成员")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SISMEMBER")]),t._v(" key member")]),t._v(" "),v("td",[t._v("判断MEMBER是否是集合key的成员，是返回1，不是或key不存在返回0。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SPOP")]),t._v(" key [count]")]),t._v(" "),v("td",[t._v("移除并返回集合key中的⼀个或count个随机元素。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SRANDMEMBER")]),t._v(" key [count]")]),t._v(" "),v("td",[t._v("和SPOP类似，区别在于SRANDMEMBER只返回不移除。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SMOVE")]),t._v(" source destination member")]),t._v(" "),v("td",[t._v("将member元素从source集合移动到destination集合。（原⼦性操作）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SCARD")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回集合key的基数（集合中元素的数量）。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SCAN")]),t._v(" cursor [MATCH pattern] [COUNT count] [TYPE type]")]),t._v(" "),v("td",[t._v("增量迭代，是⼀个基于游标的迭代器。类似的命令还有HSCAN、 SSCAN、 ZSCAN。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SINTER")]),t._v(" key [key ...]")]),t._v(" "),v("td",[t._v("返回⼀个集合的全部成员，多个集合则返回交集。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SINTERSTORE")]),t._v(" destination key [key ...]")]),t._v(" "),v("td",[t._v("类似SINTER，区别是SINTERSTORE会保存结果集到destination集合中，⽽不是单纯返回。 若destination存在则将其覆盖， destination可以是key本身。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SUNION")]),t._v(" key [key ...]")]),t._v(" "),v("td",[t._v("返回⼀个集合的全部成员，多个集合则返回并集。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SUNIONSTORE")]),t._v(" destination key [key ...]")]),t._v(" "),v("td",[t._v("类似SUNION，区别是SUNIONSTORE会保存结果集到destination集合中，⽽不是单纯返回。 若destination存在则将其覆盖， destination可以是key本身。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SDIFF")]),t._v(" key [key ...]")]),t._v(" "),v("td",[t._v("返回⼀个集合的全部成员，多个集合则返回差集。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("SDIFFSTORE")]),t._v(" destination key [key ...]")]),t._v(" "),v("td",[t._v("类似SDIFF，区别是SDIFFSTORE会保存结果集到destination集合中，⽽不是单纯返回。 若destination存在则将其覆盖， destination可以是key本身。")])])])]),t._v(" "),v("h2",{attrs:{id:"有序集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#有序集合"}},[t._v("#")]),t._v(" 有序集合")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("有序集合的使用")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("ZADD")]),t._v(" key "),v("code",[t._v("[NX|XX] [GT|LT] [CH] [INCR]")]),t._v(" score member [score member ..]")]),t._v(" "),v("td",[t._v("将⼀个或多个member元素及其分数score加⼊到有序集合key中。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREM")]),t._v(" key member [member ..]")]),t._v(" "),v("td",[t._v("将⼀个或多个成员从集合key中移除。不存在的member成员将被忽略。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZSCORE")]),t._v(" key member")]),t._v(" "),v("td",[t._v("返回有序集合key中的成员member的分数值（score）。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZINCRBY")]),t._v(" key increment member")]),t._v(" "),v("td",[t._v("为有序集合key的成员member的分数值score加上⼀个增量increment。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZCARD")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回有序集合key的基数（集合中成员的数量）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZCOUNT")]),t._v(" key min max")]),t._v(" "),v("td",[t._v("返回有序集合key中，分数值score在min和max之间（包括等于）的成员的数量。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZRANGE")]),t._v(" key start stop "),v("code",[t._v("[BYSCORE|BYLEX] [REV] [LIMIT offset count][WITHSCORES]")])]),t._v(" "),v("td",[t._v("返回有序集合key中指定区间内的成员。（从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREVRANGE")]),t._v(" key start stop [WITHSCORES]")]),t._v(" "),v("td",[t._v("返回有序集合key中指定区间内的成员。（从⼤到⼩排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZRANGEBYSCORE")]),t._v(" key min max [WITHSCORES] [LIMIT offset count]")]),t._v(" "),v("td",[t._v("返回有序集合key中所有score值在指定区间内的成员。（从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREVRANGEBYSCORE")]),t._v(" key min max [WITHSCORES] [LIMIT offse count]")]),t._v(" "),v("td",[t._v("返回有序集合key中所有score值在指定区间内的成员。（从⼤到⼩排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZRANK")]),t._v(" key member")]),t._v(" "),v("td",[t._v("返回有序集合key中成员member的排名。（按照score从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREVRANK")]),t._v(" key member")]),t._v(" "),v("td",[t._v("返回有序集合key中成员member的排名。（按照score从⼤到⼩排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREMRANGEBYRANK")]),t._v(" key start stop")]),t._v(" "),v("td",[t._v("移除有序集合key中指定排名区间内的所有member。（按照score从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREMRANGEBYSCORE")]),t._v(" key min max")]),t._v(" "),v("td",[t._v("移除有序集合key中指定分数区间内的所有member。（按照score从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZREMRANGEBYLEX")]),t._v(" key min max")]),t._v(" "),v("td",[t._v("移除有序集合key中指定字典序区间内的所有member。（按照字典序从⼩到⼤排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZRANGEBYLEX")]),t._v(" key min max [LIMIT offset count]")]),t._v(" "),v("td",[t._v("返回有序集合key中所有字典序在指定区间内的成员。（从⼤到⼩排列）")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZLEXCOUNT")]),t._v(" key min max")]),t._v(" "),v("td",[t._v("返回有序集合key中指定字典序区间内的所有member的数量。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZSCAN")]),t._v(" cursor [MATCH pattern] [COUNT count] [TYPE type]")]),t._v(" "),v("td",[t._v("增量迭代，是⼀个基于游标的迭代器。类似的命令还有HSCAN、 SSCAN、 SCAN。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZUNIONSTORE")]),t._v(" destination numkeys key [key ...]")]),t._v(" "),v("td",[t._v("返回⼀个或多个有序集合的并集，并存储到destination中。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("ZINTERSTORE")]),t._v(" destination numkeys key [key ...]")]),t._v(" "),v("td",[t._v("返回⼀个或多个有序集合的交集，并存储到destination中。")])])])]),t._v(" "),v("h2",{attrs:{id:"哈希"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#哈希"}},[t._v("#")]),t._v(" 哈希")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("哈希的使用")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("strong",[t._v("HSET")]),t._v(" key field value [field value ...]")]),t._v(" "),v("td",[t._v("将哈希表key中的域field的值设置为value。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HSETNX")]),t._v(" key field value")]),t._v(" "),v("td",[t._v("当且仅当field不存在的时候，将哈希表key中的域field的值设置为value")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HGET")]),t._v(" key field")]),t._v(" "),v("td",[t._v("返回哈希表key中给定域field的值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HEXISTS")]),t._v(" key field")]),t._v(" "),v("td",[t._v("判断给定域field是否存在于哈希表key中。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HDEL")]),t._v(" key field [field ...]")]),t._v(" "),v("td",[t._v("删除哈希表key中的⼀个或多个指定域field")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HLEN")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回哈希表key中域的数量。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HSTRLEN")]),t._v(" key field")]),t._v(" "),v("td",[t._v("返回哈希表key中，给定域field相关联的值的字符串⻓度")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HINCRBY")]),t._v(" key field increment")]),t._v(" "),v("td",[t._v("将哈希表key中field的值加上增量increment。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HINCRBYFLOAT")]),t._v(" key field increment")]),t._v(" "),v("td",[t._v("将哈希表key中field的值加上浮点数增量increment。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HMSET")]),t._v(" key field value [field value ...]")]),t._v(" "),v("td",[t._v("设置多个key-value对。（功能同HSET相同，已过时）。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HMGET")]),t._v(" key field [field ...]")]),t._v(" "),v("td",[t._v("返回哈希表key中⼀个或多个给定域field的值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HKEYS")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回哈希表key中的所有域。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HVALS")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回哈希表key中所有域的值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HGETALL")]),t._v(" key")]),t._v(" "),v("td",[t._v("返回哈希表key中所有的域和值。")])]),t._v(" "),v("tr",[v("td",[v("strong",[t._v("HSCAN")]),t._v(" key cursor [MATCH pattern] [COUNT count]")]),t._v(" "),v("td",[t._v("增量迭代，是⼀个基于游标的迭代器。类似的命令还有SCAN、 SSCAN、 ZSCAN。")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);