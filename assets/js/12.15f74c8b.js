(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{418:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"关于malloc和new区别的讨论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于malloc和new区别的讨论"}},[s._v("#")]),s._v(" 关于malloc和new区别的讨论")]),s._v(" "),t("p",[s._v("​\t\t在C++中，内存动态分配可以通过两种方式实现：使用C语言的"),t("code",[s._v("malloc")]),s._v("函数或C++的"),t("code",[s._v("new")]),s._v("运算符。尽管它们都用于分配内存，但在使用方法、功能和内存管理等方面存在显著差异。以下是对两者的简略比较：")]),s._v(" "),t("h2",{attrs:{id:"_1-malloc-和-free"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-malloc-和-free"}},[s._v("#")]),s._v(" 1."),t("code",[s._v("malloc")]),s._v(" 和 "),t("code",[s._v("free")])]),s._v(" "),t("p",[s._v("​\t\t首先两者的回收内存的关键字不同，先来说"),t("code",[s._v("malloc")]),s._v(" 和 "),t("code",[s._v("free")]),s._v("这一组。")]),s._v(" "),t("p",[t("strong",[s._v("用法")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("malloc")]),s._v(" 是一个C库函数，用于分配指定字节数的内存。")]),s._v(" "),t("li",[t("code",[s._v("free")]),s._v(" 是一个C库函数，用于释放之前通过"),t("code",[s._v("malloc")]),s._v("分配的内存。")])]),s._v(" "),t("p",[t("strong",[s._v("语法")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// malloc的函数声明")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<cstdlib>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在Cpp中")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdlib.h>")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在C中")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" array "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配一个长度为10的整形数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放内存")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("​\t\t由于"),t("code",[s._v("malloc")]),s._v("在函数声明时返回值为"),t("code",[s._v("void*")]),s._v("，所以当我们在使用"),t("code",[s._v("malloc")]),s._v("一般会将其强制类型转化，并且在使用时要标名申请内存的大小。")]),s._v(" "),t("p",[t("strong",[s._v("特点")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("返回"),t("code",[s._v("void*")]),s._v("类型的指针，需要手动进行类型转换。")]),s._v(" "),t("li",[s._v("不会调用构造函数或析构函数（C++中的对象初始化和清理需要手动处理）。")]),s._v(" "),t("li",[s._v("分配的内存未初始化，内容为未定义。")]),s._v(" "),t("li",[s._v("主要用于C语言中，在C++中使用"),t("code",[s._v("malloc")]),s._v("可能会丢失C++语言提供的某些特性。")])]),s._v(" "),t("h2",{attrs:{id:"_2-new-和-delete"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-new-和-delete"}},[s._v("#")]),s._v(" 2."),t("code",[s._v("new")]),s._v(" 和 "),t("code",[s._v("delete")])]),s._v(" "),t("p",[t("strong",[s._v("用法")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("new")]),s._v(" 是C++中的运算符，用于分配并初始化内存。")]),s._v(" "),t("li",[t("code",[s._v("delete")]),s._v(" 是C++中的运算符，用于释放内存并调用对象的析构函数。")])]),s._v(" "),t("p",[t("strong",[s._v("语法")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" array "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配一个长度为10的整形数组，并且初始化为0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放内存")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("​\t\t使用"),t("code",[s._v("new")]),s._v("来分配空间，可以初始化变量。")]),s._v(" "),t("p",[t("strong",[s._v("特点")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("不需要进行类型转换，直接返回指定类型的指针。")]),s._v(" "),t("li",[s._v("自动调用对象的构造函数，确保对象初始化。")]),s._v(" "),t("li",[s._v("与之对应的"),t("code",[s._v("delete")]),s._v("运算符会自动调用析构函数，完成对象清理。")]),s._v(" "),t("li",[s._v("内存分配和释放方式与C++的面向对象特性兼容。")])]),s._v(" "),t("h2",{attrs:{id:"_3-区别总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-区别总结"}},[s._v("#")]),s._v(" 3.区别总结")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("类型安全性")]),s._v(":\n"),t("ul",[t("li",[t("code",[s._v("malloc")]),s._v(" 返回"),t("code",[s._v("void*")]),s._v("，需要手动类型转换，可能导致类型不安全。")]),s._v(" "),t("li",[t("code",[s._v("new")]),s._v(" 不需要类型转换，直接返回对象类型的指针，类型安全。")])])]),s._v(" "),t("li",[t("strong",[s._v("初始化和清理")]),s._v(":\n"),t("ul",[t("li",[t("code",[s._v("malloc")]),s._v(" 只分配内存，不调用构造函数，不负责初始化。")]),s._v(" "),t("li",[t("code",[s._v("new")]),s._v(" 负责调用构造函数，进行对象初始化。")]),s._v(" "),t("li",[t("code",[s._v("free")]),s._v(" 只释放内存，不调用析构函数，不进行对象清理。（ 如指针指向的空间会被释放，但是指针本身不会被释放 ，只有当程序结束时才会释放）")]),s._v(" "),t("li",[t("code",[s._v("delete")]),s._v(" 会调用析构函数，负责对象清理。")])])]),s._v(" "),t("li",[t("strong",[s._v("异常处理")]),s._v(":\n"),t("ul",[t("li",[t("code",[s._v("malloc")]),s._v(" 如果分配失败，返回"),t("code",[s._v("NULL")]),s._v("，需要手动检查。")]),s._v(" "),t("li",[t("code",[s._v("new")]),s._v(" 如果分配失败，抛出"),t("code",[s._v("std::bad_alloc")]),s._v("异常。")])])]),s._v(" "),t("li",[t("strong",[s._v("适用场景")]),s._v(":\n"),t("ul",[t("li",[t("code",[s._v("malloc")]),s._v(" 适用于C语言，或需要与C代码互操作的场景。")]),s._v(" "),t("li",[t("code",[s._v("new")]),s._v(" 适用于C++中的对象动态分配，更符合C++的面向对象特性。")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);